<?php




##### ---------------------------------------------------------- #####
#   NOTE: ADD ANY CUSTOM CONFIGURATIONS TO THE BOTTOM OF THIS FILE   #
##### ---------------------------------------------------------- #####





# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.
if( defined( 'MW_INSTALL_PATH' ) ) {
	$IP = MW_INSTALL_PATH;
} else {
	$IP = dirname( __FILE__ );
}

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

require_once( "$IP/includes/DefaultSettings.php" );

# If PHP's memory limit is very low, some operations may fail.
# ini_set( 'memory_limit', '20M' );

if ( $wgCommandLineMode ) {
	if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
		die( "This script must be run from the command line\n" );
	}
}
## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

## UPO means: this is also a user preference option

$wgEnableEmail      = true;
$wgEnableUserEmail  = true; # UPO

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

$wgGroupPermissions['bureaucrat']['userrights'] = true;
$wgGroupPermissions['bureaucrat']['editprotected'] = true;
$wgGroupPermissions['bureaucrat']['editinterface'] = true;
$wgAddGroups['bureaucrat'] = true;
$wgNamespacesWithSubpages[NS_MAIN] = true;

## Database settings
$wgDBtype           = "mysql";
$wgDBserver         = "localhost";

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
#$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=binary";
$wgDBTableOptions   = "ENGINE=InnoDB";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = false;

## Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
$wgMemCachedServers = array();

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = false;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

$wgLocalInterwiki   = strtolower( $wgSitename );

$wgLanguageCode = "en";

$wgSecretKey = "fcbc8994e78b3b176c99bf0e78d6828e0c0bdf9504798c82d2812971aa68d581";

$wgSkipSkins = array("cc4", "chick", "standard", "cologneblue", "modern", "monobook", "myskin", "nostalgia", "ontoskin", "simple");

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':
$wgDefaultSkin = 'monobook';

$wgDiff3 = "/usr/bin/diff3";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );


##### ---------------------------------------------------------- #####
#                 RDFa WIKI CUSTOM CONFIGURATIONS                    #
##### ---------------------------------------------------------- #####


$wgSitename         = "RDFaWiki";
$wgEmergencyContact = "webmaster@creativecommons.org";
$wgPasswordSender = "webmaster@creativecommons.org";

# Virtual path. This directory MUST be different from the one used in $wgScriptPath
$wgScriptPath  = "/mediawiki";
$wgArticlePath = '/wiki/$1';
$wgUsePathInfo = true;

# MySQL parameters
$wgDBname           = "rdfa_wiki";
$wgDBuser           = "rdfawiki";
$wgDBpassword       = "Rdfawiki.";

$wgLogo = "$wgScriptPath/skins/common/images/sw-cube-v.png";

# Load Semantic MediaWiki extension
include_once('extensions/SemanticMediaWiki/includes/SMW_Settings.php');
enableSemantics($wgServerName);

# Load Semantic Forms
include_once('extensions/SemanticForms/includes/SF_Settings.php');

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "http://creativecommons.org/licenses/publicdomain/";
$wgRightsText = "Content is dedicated to the public domain";
$wgRightsIcon = "http://i.creativecommons.org/l/publicdomain/88x31.png";
# $wgRightsCode = "[license_code]"; # Not yet used

# Extension to remove unwanted tabs, as see at:
# http://www.mediawiki.org/wiki/Help:FAQ#How_do_I_remove_the_article.2Fedit_etc_tabs_for_users_who_are_not_logged_in.3F
include_once("extensions/add_remove_tabs.php");

# Extension to allow for embedding flash video in pages
include_once("extensions/videoflash.php");

# Open ID extension
require_once("$IP/extensions/OpenID/OpenID.php");

# RSS Extension
require_once("extensions/rss.php");

# Add a reCaptcha to the registration page
require_once( "$IP/extensions/recaptcha/ReCaptcha.php" );
$recaptcha_public_key = '6LcGVAEAAAAAADAmYJn__9LQbOAC6KSmQY0rXZh5';
$recaptcha_private_key = '6LcGVAEAAAAAAGanD8Zrqq0l7TSDygU5IaQUuGBt';

# Don't add the rel="nofollow" to any pages
$wgNoFollowLinks = false;

# Only let users with verified email addresses make any changes
# Users who have created accounts may not edit/upload, unless they have
# confirmed their email address
#$wgGroupPermissions['*']['edit'] = false;
#$wgGroupPermissions['user' ]['move'] = false;
#$wgGroupPermissions['user' ]['edit'] = false;
#$wgGroupPermissions['user' ]['upload'] = false;
#$wgGroupPermissions['user' ]['createpage'] = false;
#$wgGroupPermissions['user' ]['createtalk'] = false;
#$wgGroupPermissions['emailconfirmed' ]['move'] = true;
#$wgGroupPermissions['emailconfirmed' ]['edit'] = true;
#$wgGroupPermissions['emailconfirmed' ]['upload'] = true;
#$wgGroupPermissions['emailconfirmed' ]['createpage'] = true;
#$wgGroupPermissions['emailconfirmed' ]['createtalk'] = true;

# This allows anonymous editing of any Talk pages (odd numbered namespaces),
# but requires one be to be logged in to edit articles.
# (nkinkade 2009-03-19)
$wgGroupPermissions['user']['editcontent'] = true;
$editPermission = array( 'editcontent' );
for ( $i = 0; $i < 1000; $i += 1) $wgNamespaceProtection[$i] = $editPermission;

# Cause MediaWiki to use the X-Forwarded-For header when
# determining the remote IP address instead of using
# 127.0.0.1, which is where Varnish is connecting from
$wgUseSquid = true;
$wgSquidServers = array('127.0.0.1');

# http://www.mediawiki.org/wiki/Extension:CheckUser
#include_once('extensions/CheckUser/CheckUser.php');
#$wgCheckUserLog = "$IP/extensions/CheckUser/CheckUser-log.txt";

# Bump PHP's memory limit to something more reasonable
# (nkinkade 2008-07-18)
ini_set( 'memory_limit', '50M' );

# Show exception in user interface, normally this should be off
#$wgShowExceptionDetails = true;

